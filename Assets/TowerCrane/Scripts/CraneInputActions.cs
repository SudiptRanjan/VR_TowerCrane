//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/CraneInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CraneInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CraneInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CraneInputActions"",
    ""maps"": [
        {
            ""name"": ""Crane"",
            ""id"": ""6e58ca60-18cd-4cfb-8bed-a62f146767a0"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""1485e50b-1ee4-4a46-b07d-70421a4515cc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""be97a59a-17b2-4905-bee2-178df83356b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LengtOfRope"",
                    ""type"": ""Value"",
                    ""id"": ""7aae8965-6fb5-44dd-bbfa-13bf020a16e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""aec8692e-c3b2-43e8-9bb8-cc002d8a6bde"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""8a5f3441-0a9f-41de-88f0-7c5ef9724c1d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""5e55d0a6-9205-470f-88c9-f2993eb3fd4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""27dcfcfc-d4b6-47e2-a1e0-aabc71e8ac5d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""d885558a-7ac7-46c5-a5f6-4fc644824f87"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a17e9f51-5479-415f-bb3f-7824953e5e06"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""41baaaab-a2bd-4630-a7b1-39424baa0608"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""6d61bd62-8f07-4493-ba90-ec43490edebe"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a38a0ca2-8de7-45ac-adb1-30179b89b663"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4953b188-197c-4573-904d-280c7617df49"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LengtOfRope"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""a4b46fb5-c3f9-4008-b7ce-2433e42a5b65"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LengtOfRope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""a3669fc2-405f-4e06-948c-975782447e99"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LengtOfRope"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5eedc8fb-32ae-496e-943f-fb7c4838b095"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6dfc218-8df4-41c8-9ac9-ae94e8cc3892"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4932629-0224-44aa-8781-8130e1fea940"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Crane
        m_Crane = asset.FindActionMap("Crane", throwIfNotFound: true);
        m_Crane_Movement = m_Crane.FindAction("Movement", throwIfNotFound: true);
        m_Crane_Pickup = m_Crane.FindAction("Pickup", throwIfNotFound: true);
        m_Crane_LengtOfRope = m_Crane.FindAction("LengtOfRope", throwIfNotFound: true);
        m_Crane_Joystick = m_Crane.FindAction("Joystick", throwIfNotFound: true);
        m_Crane_RightJoystick = m_Crane.FindAction("RightJoystick", throwIfNotFound: true);
        m_Crane_Drop = m_Crane.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Crane
    private readonly InputActionMap m_Crane;
    private List<ICraneActions> m_CraneActionsCallbackInterfaces = new List<ICraneActions>();
    private readonly InputAction m_Crane_Movement;
    private readonly InputAction m_Crane_Pickup;
    private readonly InputAction m_Crane_LengtOfRope;
    private readonly InputAction m_Crane_Joystick;
    private readonly InputAction m_Crane_RightJoystick;
    private readonly InputAction m_Crane_Drop;
    public struct CraneActions
    {
        private @CraneInputActions m_Wrapper;
        public CraneActions(@CraneInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Crane_Movement;
        public InputAction @Pickup => m_Wrapper.m_Crane_Pickup;
        public InputAction @LengtOfRope => m_Wrapper.m_Crane_LengtOfRope;
        public InputAction @Joystick => m_Wrapper.m_Crane_Joystick;
        public InputAction @RightJoystick => m_Wrapper.m_Crane_RightJoystick;
        public InputAction @Drop => m_Wrapper.m_Crane_Drop;
        public InputActionMap Get() { return m_Wrapper.m_Crane; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CraneActions set) { return set.Get(); }
        public void AddCallbacks(ICraneActions instance)
        {
            if (instance == null || m_Wrapper.m_CraneActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CraneActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Pickup.started += instance.OnPickup;
            @Pickup.performed += instance.OnPickup;
            @Pickup.canceled += instance.OnPickup;
            @LengtOfRope.started += instance.OnLengtOfRope;
            @LengtOfRope.performed += instance.OnLengtOfRope;
            @LengtOfRope.canceled += instance.OnLengtOfRope;
            @Joystick.started += instance.OnJoystick;
            @Joystick.performed += instance.OnJoystick;
            @Joystick.canceled += instance.OnJoystick;
            @RightJoystick.started += instance.OnRightJoystick;
            @RightJoystick.performed += instance.OnRightJoystick;
            @RightJoystick.canceled += instance.OnRightJoystick;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(ICraneActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Pickup.started -= instance.OnPickup;
            @Pickup.performed -= instance.OnPickup;
            @Pickup.canceled -= instance.OnPickup;
            @LengtOfRope.started -= instance.OnLengtOfRope;
            @LengtOfRope.performed -= instance.OnLengtOfRope;
            @LengtOfRope.canceled -= instance.OnLengtOfRope;
            @Joystick.started -= instance.OnJoystick;
            @Joystick.performed -= instance.OnJoystick;
            @Joystick.canceled -= instance.OnJoystick;
            @RightJoystick.started -= instance.OnRightJoystick;
            @RightJoystick.performed -= instance.OnRightJoystick;
            @RightJoystick.canceled -= instance.OnRightJoystick;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(ICraneActions instance)
        {
            if (m_Wrapper.m_CraneActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICraneActions instance)
        {
            foreach (var item in m_Wrapper.m_CraneActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CraneActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CraneActions @Crane => new CraneActions(this);
    public interface ICraneActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
        void OnLengtOfRope(InputAction.CallbackContext context);
        void OnJoystick(InputAction.CallbackContext context);
        void OnRightJoystick(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
